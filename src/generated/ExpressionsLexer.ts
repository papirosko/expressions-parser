// Generated from Expressions.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ExpressionsLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly WS = 9;
	public static readonly OPERATOR1 = 10;
	public static readonly OPERATOR2 = 11;
	public static readonly OPERATOR3 = 12;
	public static readonly BOOL = 13;
	public static readonly STRING = 14;
	public static readonly NUMBER = 15;
	public static readonly FIELD = 16;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "WS", 
		"OPERATOR1", "OPERATOR2", "OPERATOR3", "BOOL", "STRING", "NUMBER", "FIELD",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'['", "']'", "'.'", "','", "'('", "')'", "':'", "'|'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, "WS", "OPERATOR1", "OPERATOR2", "OPERATOR3", "BOOL", 
		"STRING", "NUMBER", "FIELD",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ExpressionsLexer._LITERAL_NAMES, ExpressionsLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ExpressionsLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ExpressionsLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Expressions.g4"; }

	// @Override
	public get ruleNames(): string[] { return ExpressionsLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ExpressionsLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return ExpressionsLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return ExpressionsLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x12\x87\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
		"\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x06\n5\n\n\r\n\x0E\n6\x03\n" +
		"\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x05\v@\n\v\x03\f\x03\f\x03\r\x03" +
		"\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x05\rM\n\r\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0EX\n\x0E" +
		"\x03\x0F\x03\x0F\x07\x0F\\\n\x0F\f\x0F\x0E\x0F_\v\x0F\x03\x0F\x03\x0F" +
		"\x03\x0F\x07\x0Fd\n\x0F\f\x0F\x0E\x0Fg\v\x0F\x03\x0F\x05\x0Fj\n\x0F\x03" +
		"\x10\x05\x10m\n\x10\x03\x10\x06\x10p\n\x10\r\x10\x0E\x10q\x03\x10\x05" +
		"\x10u\n\x10\x03\x10\x06\x10x\n\x10\r\x10\x0E\x10y\x05\x10|\n\x10\x03\x11" +
		"\x05\x11\x7F\n\x11\x03\x11\x03\x11\x07\x11\x83\n\x11\f\x11\x0E\x11\x86" +
		"\v\x11\x02\x02\x02\x12\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v" +
		"\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19" +
		"\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12\x03\x02\n\x05\x02" +
		"\v\f\x0E\x0F\"\"\x06\x02--//>>@@\x04\x02,,11\x03\x02$$\x03\x02))\x03\x02" +
		"2;\x05\x02C\\aac|\x06\x022;C\\aac|\x02\x98\x02\x03\x03\x02\x02\x02\x02" +
		"\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02" +
		"\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11" +
		"\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17" +
		"\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D" +
		"\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x03#\x03" +
		"\x02\x02\x02\x05%\x03\x02\x02\x02\x07\'\x03\x02\x02\x02\t)\x03\x02\x02" +
		"\x02\v+\x03\x02\x02\x02\r-\x03\x02\x02\x02\x0F/\x03\x02\x02\x02\x111\x03" +
		"\x02\x02\x02\x134\x03\x02\x02\x02\x15?\x03\x02\x02\x02\x17A\x03\x02\x02" +
		"\x02\x19L\x03\x02\x02\x02\x1BW\x03\x02\x02\x02\x1Di\x03\x02\x02\x02\x1F" +
		"l\x03\x02\x02\x02!~\x03\x02\x02\x02#$\x07]\x02\x02$\x04\x03\x02\x02\x02" +
		"%&\x07_\x02\x02&\x06\x03\x02\x02\x02\'(\x070\x02\x02(\b\x03\x02\x02\x02" +
		")*\x07.\x02\x02*\n\x03\x02\x02\x02+,\x07*\x02\x02,\f\x03\x02\x02\x02-" +
		".\x07+\x02\x02.\x0E\x03\x02\x02\x02/0\x07<\x02\x020\x10\x03\x02\x02\x02" +
		"12\x07~\x02\x022\x12\x03\x02\x02\x0235\t\x02\x02\x0243\x03\x02\x02\x02" +
		"56\x03\x02\x02\x0264\x03\x02\x02\x0267\x03\x02\x02\x0278\x03\x02\x02\x02" +
		"89\b\n\x02\x029\x14\x03\x02\x02\x02:;\x07@\x02\x02;@\x07?\x02\x02<=\x07" +
		">\x02\x02=@\x07?\x02\x02>@\t\x03\x02\x02?:\x03\x02\x02\x02?<\x03\x02\x02" +
		"\x02?>\x03\x02\x02\x02@\x16\x03\x02\x02\x02AB\t\x04\x02\x02B\x18\x03\x02" +
		"\x02\x02CD\x07(\x02\x02DM\x07(\x02\x02EF\x07~\x02\x02FM\x07~\x02\x02G" +
		"H\x07?\x02\x02HM\x07?\x02\x02IM\x03\x02\x02\x02JK\x07#\x02\x02KM\x07?" +
		"\x02\x02LC\x03\x02\x02\x02LE\x03\x02\x02\x02LG\x03\x02\x02\x02LI\x03\x02" +
		"\x02\x02LJ\x03\x02\x02\x02M\x1A\x03\x02\x02\x02NO\x07v\x02\x02OP\x07t" +
		"\x02\x02PQ\x07w\x02\x02QX\x07g\x02\x02RS\x07h\x02\x02ST\x07c\x02\x02T" +
		"U\x07n\x02\x02UV\x07u\x02\x02VX\x07g\x02\x02WN\x03\x02\x02\x02WR\x03\x02" +
		"\x02\x02X\x1C\x03\x02\x02\x02Y]\x07$\x02\x02Z\\\n\x05\x02\x02[Z\x03\x02" +
		"\x02\x02\\_\x03\x02\x02\x02][\x03\x02\x02\x02]^\x03\x02\x02\x02^`\x03" +
		"\x02\x02\x02_]\x03\x02\x02\x02`j\x07$\x02\x02ae\x07)\x02\x02bd\n\x06\x02" +
		"\x02cb\x03\x02\x02\x02dg\x03\x02\x02\x02ec\x03\x02\x02\x02ef\x03\x02\x02" +
		"\x02fh\x03\x02\x02\x02ge\x03\x02\x02\x02hj\x07)\x02\x02iY\x03\x02\x02" +
		"\x02ia\x03\x02\x02\x02j\x1E\x03\x02\x02\x02km\x07/\x02\x02lk\x03\x02\x02" +
		"\x02lm\x03\x02\x02\x02mo\x03\x02\x02\x02np\t\x07\x02\x02on\x03\x02\x02" +
		"\x02pq\x03\x02\x02\x02qo\x03\x02\x02\x02qr\x03\x02\x02\x02r{\x03\x02\x02" +
		"\x02su\x070\x02\x02ts\x03\x02\x02\x02tu\x03\x02\x02\x02uw\x03\x02\x02" +
		"\x02vx\t\x07\x02\x02wv\x03\x02\x02\x02xy\x03\x02\x02\x02yw\x03\x02\x02" +
		"\x02yz\x03\x02\x02\x02z|\x03\x02\x02\x02{t\x03\x02\x02\x02{|\x03\x02\x02" +
		"\x02| \x03\x02\x02\x02}\x7F\x07/\x02\x02~}\x03\x02\x02\x02~\x7F\x03\x02" +
		"\x02\x02\x7F\x80\x03\x02\x02\x02\x80\x84\t\b\x02\x02\x81\x83\t\t\x02\x02" +
		"\x82\x81\x03\x02\x02\x02\x83\x86\x03\x02\x02\x02\x84\x82\x03\x02\x02\x02" +
		"\x84\x85\x03\x02\x02\x02\x85\"\x03\x02\x02\x02\x86\x84\x03\x02\x02\x02" +
		"\x11\x026?LW]eilqty{~\x84\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ExpressionsLexer.__ATN) {
			ExpressionsLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ExpressionsLexer._serializedATN));
		}

		return ExpressionsLexer.__ATN;
	}

}

