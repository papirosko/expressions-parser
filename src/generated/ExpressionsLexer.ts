// Generated from Expressions.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ExpressionsLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly WS = 9;
	public static readonly OPERATOR1 = 10;
	public static readonly OPERATOR2 = 11;
	public static readonly OPERATOR3 = 12;
	public static readonly BOOL = 13;
	public static readonly STRING = 14;
	public static readonly NUMBER = 15;
	public static readonly FIELD = 16;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "WS", 
		"OPERATOR1", "OPERATOR2", "OPERATOR3", "BOOL", "STRING", "NUMBER", "FIELD",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'['", "']'", "'.'", "','", "'('", "')'", "':'", "'|'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, "WS", "OPERATOR1", "OPERATOR2", "OPERATOR3", "BOOL", 
		"STRING", "NUMBER", "FIELD",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ExpressionsLexer._LITERAL_NAMES, ExpressionsLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ExpressionsLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ExpressionsLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Expressions.g4"; }

	// @Override
	public get ruleNames(): string[] { return ExpressionsLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ExpressionsLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return ExpressionsLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return ExpressionsLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x12\x84\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
		"\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x06\n5\n\n\r\n\x0E\n6\x03\n" +
		"\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x05\v@\n\v\x03\f\x03\f\x03\r\x03" +
		"\r\x03\r\x03\r\x03\r\x03\r\x05\rJ\n\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0EU\n\x0E\x03\x0F\x03\x0F" +
		"\x07\x0FY\n\x0F\f\x0F\x0E\x0F\\\v\x0F\x03\x0F\x03\x0F\x03\x0F\x07\x0F" +
		"a\n\x0F\f\x0F\x0E\x0Fd\v\x0F\x03\x0F\x05\x0Fg\n\x0F\x03\x10\x05\x10j\n" +
		"\x10\x03\x10\x06\x10m\n\x10\r\x10\x0E\x10n\x03\x10\x05\x10r\n\x10\x03" +
		"\x10\x06\x10u\n\x10\r\x10\x0E\x10v\x05\x10y\n\x10\x03\x11\x05\x11|\n\x11" +
		"\x03\x11\x03\x11\x07\x11\x80\n\x11\f\x11\x0E\x11\x83\v\x11\x02\x02\x02" +
		"\x12\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F" +
		"\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F" +
		"\x1D\x02\x10\x1F\x02\x11!\x02\x12\x03\x02\n\x05\x02\v\f\x0E\x0F\"\"\x06" +
		"\x02--//>>@@\x04\x02,,11\x03\x02$$\x03\x02))\x03\x022;\x05\x02C\\aac|" +
		"\x06\x022;C\\aac|\x02\x93\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02" +
		"\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02" +
		"\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02" +
		"\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02" +
		"\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02" +
		"\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x03#\x03\x02\x02\x02\x05" +
		"%\x03\x02\x02\x02\x07\'\x03\x02\x02\x02\t)\x03\x02\x02\x02\v+\x03\x02" +
		"\x02\x02\r-\x03\x02\x02\x02\x0F/\x03\x02\x02\x02\x111\x03\x02\x02\x02" +
		"\x134\x03\x02\x02\x02\x15?\x03\x02\x02\x02\x17A\x03\x02\x02\x02\x19I\x03" +
		"\x02\x02\x02\x1BT\x03\x02\x02\x02\x1Df\x03\x02\x02\x02\x1Fi\x03\x02\x02" +
		"\x02!{\x03\x02\x02\x02#$\x07]\x02\x02$\x04\x03\x02\x02\x02%&\x07_\x02" +
		"\x02&\x06\x03\x02\x02\x02\'(\x070\x02\x02(\b\x03\x02\x02\x02)*\x07.\x02" +
		"\x02*\n\x03\x02\x02\x02+,\x07*\x02\x02,\f\x03\x02\x02\x02-.\x07+\x02\x02" +
		".\x0E\x03\x02\x02\x02/0\x07<\x02\x020\x10\x03\x02\x02\x0212\x07~\x02\x02" +
		"2\x12\x03\x02\x02\x0235\t\x02\x02\x0243\x03\x02\x02\x0256\x03\x02\x02" +
		"\x0264\x03\x02\x02\x0267\x03\x02\x02\x0278\x03\x02\x02\x0289\b\n\x02\x02" +
		"9\x14\x03\x02\x02\x02:;\x07@\x02\x02;@\x07?\x02\x02<=\x07>\x02\x02=@\x07" +
		"?\x02\x02>@\t\x03\x02\x02?:\x03\x02\x02\x02?<\x03\x02\x02\x02?>\x03\x02" +
		"\x02\x02@\x16\x03\x02\x02\x02AB\t\x04\x02\x02B\x18\x03\x02\x02\x02CD\x07" +
		"(\x02\x02DJ\x07(\x02\x02EF\x07~\x02\x02FJ\x07~\x02\x02GH\x07?\x02\x02" +
		"HJ\x07?\x02\x02IC\x03\x02\x02\x02IE\x03\x02\x02\x02IG\x03\x02\x02\x02" +
		"J\x1A\x03\x02\x02\x02KL\x07v\x02\x02LM\x07t\x02\x02MN\x07w\x02\x02NU\x07" +
		"g\x02\x02OP\x07h\x02\x02PQ\x07c\x02\x02QR\x07n\x02\x02RS\x07u\x02\x02" +
		"SU\x07g\x02\x02TK\x03\x02\x02\x02TO\x03\x02\x02\x02U\x1C\x03\x02\x02\x02" +
		"VZ\x07$\x02\x02WY\n\x05\x02\x02XW\x03\x02\x02\x02Y\\\x03\x02\x02\x02Z" +
		"X\x03\x02\x02\x02Z[\x03\x02\x02\x02[]\x03\x02\x02\x02\\Z\x03\x02\x02\x02" +
		"]g\x07$\x02\x02^b\x07)\x02\x02_a\n\x06\x02\x02`_\x03\x02\x02\x02ad\x03" +
		"\x02\x02\x02b`\x03\x02\x02\x02bc\x03\x02\x02\x02ce\x03\x02\x02\x02db\x03" +
		"\x02\x02\x02eg\x07)\x02\x02fV\x03\x02\x02\x02f^\x03\x02\x02\x02g\x1E\x03" +
		"\x02\x02\x02hj\x07/\x02\x02ih\x03\x02\x02\x02ij\x03\x02\x02\x02jl\x03" +
		"\x02\x02\x02km\t\x07\x02\x02lk\x03\x02\x02\x02mn\x03\x02\x02\x02nl\x03" +
		"\x02\x02\x02no\x03\x02\x02\x02ox\x03\x02\x02\x02pr\x070\x02\x02qp\x03" +
		"\x02\x02\x02qr\x03\x02\x02\x02rt\x03\x02\x02\x02su\t\x07\x02\x02ts\x03" +
		"\x02\x02\x02uv\x03\x02\x02\x02vt\x03\x02\x02\x02vw\x03\x02\x02\x02wy\x03" +
		"\x02\x02\x02xq\x03\x02\x02\x02xy\x03\x02\x02\x02y \x03\x02\x02\x02z|\x07" +
		"/\x02\x02{z\x03\x02\x02\x02{|\x03\x02\x02\x02|}\x03\x02\x02\x02}\x81\t" +
		"\b\x02\x02~\x80\t\t\x02\x02\x7F~\x03\x02\x02\x02\x80\x83\x03\x02\x02\x02" +
		"\x81\x7F\x03\x02\x02\x02\x81\x82\x03\x02\x02\x02\x82\"\x03\x02\x02\x02" +
		"\x83\x81\x03\x02\x02\x02\x11\x026?ITZbfinqvx{\x81\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ExpressionsLexer.__ATN) {
			ExpressionsLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ExpressionsLexer._serializedATN));
		}

		return ExpressionsLexer.__ATN;
	}

}

